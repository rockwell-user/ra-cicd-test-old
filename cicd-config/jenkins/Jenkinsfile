pipeline {
    agent any
    
    environment {
        PATH_GITHUB = 'C:\\Users\\ASYost\\source\\repos\\ra-cicd-test-old\\'
        ACDFILENAME = 'CICD_test.ACD'
        GITHUB_USER_EMAIL = 'andresyost2000@gmail.com'
        GITHUB_USER_NAME = 'Andre Sandor Yost'
        GITHUB_USERNAME = 'rockwell-user'
        GITHUB_PASSWORD = 'RockwellGithub!'
        GITHUB_ACCESTOKEN = 'ghp_mpOj91xiccmZmGnGezvyxYLNWNas8Z39k?z?E?P?'
        GITHUB_REPO_NAME = 'ra-cicd-test-old'
        GITHUB_DEV_BRANCH = 'dev-branch'
        DOTNET_VERSION = '8.0'
        DOTNET_INSTALL_DIR = 'C:\\Program Files\\dotnet'
        TEST_RESULT = ''
        UNIQUE_LABEL = "${BUILD_TAG}-${GIT_COMMIT}"
    }

    stages {
        stage('Check .NET SDK') {
            steps {
                createBanner('STAGE: Check .NET SDK')
                script {
                    def dotnetVersionInstalledCMD = bat(
                        script: 'dotnet --version',
                        returnStdout: true
                    ).trim()
                    def dotnetVersionInstalled_values = dotnetVersionInstalledCMD.split(' ')
                    def dotnetVersionInstalled = dotnetVersionInstalled_values[2].trim()

                    if (!dotnetVersionInstalled.startsWith(env.DOTNET_VERSION)) {
                        echo "Installing .NET SDK $DOTNET_VERSION..."
                        bat label: 'Install .NET SDK %DOTNET_VERSION%',
                            script: """
                                mkdir "$DOTNET_INSTALL_DIR"
                                cd "$DOTNET_INSTALL_DIR"
                                curl -o dotnet-install.ps1 -L https://dot.net/v1/dotnet-install.ps1
                                powershell -ExecutionPolicy Bypass -File .\\dotnet-install.ps1 -Channel $DOTNET_VERSION -InstallDir \"$DOTNET_INSTALL_DIR\" -NoPath
                            """
                    } else {
                        echo ".NET SDK $DOTNET_VERSION is already installed."
                    }
                }
            }
        }
        stage ('Build') {
            steps {
                createBanner('STAGE: Build')
                echo "Starting Build..."
                bat """
                    cd %PATH_GITHUB%cicd-config\\stage-test\\stage-test-configuration\\TestStage_CICD
                    dotnet restore
                    dotnet build
                """
                
            }
        }
        stage('Test') {
            steps {
                createBanner('STAGE: Test')
                echo "Starting Test..."
                script {
                    testResult = bat(script: "@%PATH_GITHUB%cicd-config\\stage-test\\stage-test-configuration\\TestStage_CICD\\bin\\Debug\\net%DOTNET_VERSION%\\TestStage_CICD.exe %PATH_GITHUB% %ACDFILENAME%", returnStdout: true).trim()
                    echo "Test result is: ${testResult}"
                    displayContentsOfMostRecentTextFile("${env.PATH_GITHUB}cicd-config\\stage-test\\test-reports")
                    TEST_RESULT = testResult
                }
            }
        }
        stage('Release') {
            steps {
                createBanner('STAGE: Release')
                script {
                    if (TEST_RESULT == 'SUCCESS') {
                        echo 'Test SUCCESS: Start releasing development results...'
                        def cleaned_token = env.GITHUB_ACCESTOKEN.replaceAll("\\?", "")
                        def gitUrl = "https://${env.GITHUB_USERNAME}:${cleaned_token}@github.com/${env.GITHUB_USERNAME}/${env.GITHUB_REPO_NAME}.git"
                        echo env.UNIQUE_LABEL
                        bat """
                            cd %PATH_GITHUB%
                            git config --global --add safe.directory "*"
                            git config --global core.autocrlf false
                            git config --global user.email %GITHUB_USER_EMAIL%
                            git config --global user.name "%GITHUB_USER_NAME%"
                            git branch -a
                            git checkout %GITHUB_DEV_BRANCH%
                            git add -A
                            git commit -m "%UNIQUE_LABEL% | Commiting Results for Successful Jenkins Automated Test"
                            git push origin %GITHUB_DEV_BRANCH%

                        """
                        // git remote set-url origin ${gitUrl}
                        sendEmail('SUCCESS')
                    }
                    else {
                        echo 'Test FAILURE: Return to Studio 5000 Logix Designer, correct the error, and push a new commit.'
                        sendEmail('FAILURE')
                    }
                }
                
            }
        }
        stage('Deploy') {
            steps {
                createBanner('STAGE: Deploy')
            }
        }
    }
    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir() /* clean up our workspace */
        }
        success {
            createBanner('CI/CD pipeline executed successfully!')
        }
        failure {
            createBanner('CI/CD pipeline failed with errors.')
        }
    }
}

def createBanner(bannerName) {
    script {
        def finalBanner = '-=[' + bannerName + ']=-'
        echo finalBanner.padRight(200, '-')
    }
}

def sendEmail(status) {
    emailext(
        body: "The C# script for the CI/CD test stage was a ${status}.",
        subject: "CI/CD Test Stage Result: ${status}",
        to: 'andresyost2000@gmail.com'
        )
}

def displayContentsOfMostRecentTextFile(folderPath) {
    def fileList = bat(script: "dir /b /o:-d ${folderPath}", returnStdout: true).trim().split('\r\n')
    if (fileList.size() > 0) {
        def mostRecentFile = fileList[1]
        echo "The contents of the most recent test file (${mostRecentFile}):"
        def fileContents = readFile("${folderPath}\\${mostRecentFile}")
        echo "${fileContents}"
    } else {
        echo "No text files found in the folder: ${folderPath}"
    }
}