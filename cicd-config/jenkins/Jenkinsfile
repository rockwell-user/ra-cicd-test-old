pipeline {
    agent any
    
    environment {
        path_GitHub = 'C:\\Users\\ASYost\\source\\repos\\ra-cicd-test-old\\'
        acdFileName = 'CICD_test.ACD'
        DOTNET_VERSION = '6.0'
        DOTNET_INSTALL_DIR = 'C:\\Program Files\\dotnet'
        TEST_RESULT = ''
    }

    stages {
        stage('Check .NET SDK') {
            steps {
                script {
                    def dotnetVersionInstalled = bat(
                        script: 'dotnet --version',
                        returnStdout: true
                    ).trim()

                    if (!dotnetVersionInstalled.startsWith(DOTNET_VERSION)) {
                        echo "Installing .NET SDK $DOTNET_VERSION..."
                        // Download and install .NET SDK 6.0 using curl
                        bat label: 'Install .NET SDK 6.0',
                            script: """
                                mkdir "$DOTNET_INSTALL_DIR"
                                cd "$DOTNET_INSTALL_DIR"
                                curl -o dotnet-install.ps1 -L https://dot.net/v1/dotnet-install.ps1
                                powershell -ExecutionPolicy Bypass -File .\\dotnet-install.ps1 -Channel 6.0 -InstallDir \"$DOTNET_INSTALL_DIR\" -NoPath
                            """
                    } else {
                        echo ".NET SDK $DOTNET_VERSION is already installed."
                    }
                }
            }
        }
        stage ('Build') {
            steps {
                echo 'Starting Build...'

                bat """
                    cd %path_GitHub%cicd-config\\stage-test\\stage-test-configuration\\LogixSDKDemoApp
                    dotnet build
                """
                
            }
        }
        stage('Test') {
            steps {
                echo 'Starting Test..'
                bat """
                    cd %path_GitHub%cicd-config\\stage-test\\test-reports
                """
                
                // testResult = sh (
                //     script: '%path_GitHub%cicd-config\\stage-test\\stage-test-configuration\\LogixSDKDemoApp\\bin\\Debug\\net6.0\\TestStage_CICDExample.exe %path_GitHub% %acdFileName%',
                //     returnStdout: true
                // ).trim()
                script {
                    testResult = bat(script: "@%path_GitHub%cicd-config\\stage-test\\stage-test-configuration\\LogixSDKDemoApp\\bin\\Debug\\net6.0\\TestStage_CICDExample.exe %path_GitHub% %acdFileName%", returnStdout: true).trim()
                    echo testResult
                    
                    displayContentsOfMostRecentTextFile('C:\\Users\\ASYost\\source\\repos\\ra-cicd-test-old\\cicd-config\\stage-test\\test-reports')
                    
                    TEST_RESULT = testResult
                    if (testResult == 'SUCCESS') {
                        sendEmail('SUCCESS')
                    } else if (testResult == 'FAILURE') {
                        sendEmail('FAILURE')
                    } else {
                        echo "Unkwon output: $testResult"
                    }
                }
            }
        }
        stage('Publish') {
            steps {
                echo 'Starting Publishing..'

                bat """
                    cd %path_GitHub%
                    git --version
                """
            }
        }
        stage('Deployment') {
            steps {
                echo 'Starting Deployment....'
            }
        }
    }
    post {
        always {
            echo 'Cleaing up workspace...'
            deleteDir() /* clean up our workspace */
        }
        success {
            echo 'This CI/CD pipeline executed successfully!'
        }
        failure {
            echo 'This CI/CD pipeline failed with errors.'
        }
    }
}

def sendEmail(status) {
    emailext(
        to: 'andresyost2000@gmail.com',
        subject: "CI/CD Test Stage Result: ${status}",
        body: "The C# script for the CI/CD test stage was a ${status}."
        )
}

def displayContentsOfMostRecentTextFile(folderPath) {
    def fileList = bat(script: "dir /b /o:-d C:\\Users\\ASYost\\source\\repos\\ra-cicd-test-old\\cicd-config\\stage-test\\test-reports", returnStdout: true).trim().split('\r\n')
    echo "${fileList}"
    echo "${fileList.size()}"
    echo "${fileList[0]}"
    echo "${fileList[1]}"
    if (fileList.size() > 0) {
        def mostRecentFile = fileList[1]

        // def fileContents = bat(script: "type C:\\Users\\ASYost\\source\\repos\\ra-cicd-test-old\\cicd-config\\stage-test\\test-reports\\${mostRecentFile}", returnStdout: true)
        def fileContents = readFile("C:\\Users\\ASYost\\source\\repos\\ra-cicd-test-old\\cicd-config\\stage-test\\test-reports\\${mostRecentFile}")
        echo "The contents of the most recent test file (${mostRecentFile}):"
        echo "${fileContents}"
    } else {
        echo "No text files found in the folder: ${folderPath}"
    }
}