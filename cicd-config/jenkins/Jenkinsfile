pipeline {
    agent any
    
    environment {
        path_GitHub = 'C:\\Users\\ASYost\\source\\repos\\ra-cicd-test-old\\'
        acdFileName = 'CICD_test.ACD'
        DOTNET_VERSION = '6.0'
        DOTNET_INSTALL_DIR = 'C:\\Program Files\\dotnet'
    }

    stages {
        stage('Check .NET SDK') {
            steps {
                script {
                    def dotnetVersionInstalled = bat(
                        script: 'dotnet --version',
                        returnStdout: true
                    ).trim()

                    if (!dotnetVersionInstalled.startsWith(DOTNET_VERSION)) {
                        echo "Installing .NET SDK $DOTNET_VERSION..."
                        // Download and install .NET SDK 6.0 using curl
                        bat label: 'Install .NET SDK 6.0',
                            script: """
                                mkdir "$DOTNET_INSTALL_DIR"
                                cd "$DOTNET_INSTALL_DIR"
                                curl -o dotnet-install.ps1 -L https://dot.net/v1/dotnet-install.ps1
                                powershell -ExecutionPolicy Bypass -File .\\dotnet-install.ps1 -Channel 6.0 -InstallDir \"$DOTNET_INSTALL_DIR\" -NoPath
                            """
                    } else {
                        echo ".NET SDK $DOTNET_VERSION is already installed."
                    }
                }
            }
        }
        stage ('Build') {
            steps {
                echo 'Starting Build...'
                //bat 'whoami'
                // script {
                //     sh 'ls -d */'
                // }

                bat """
                    cd %path_GitHub%cicd-config\\stage-test\\stage-test-configuration\\LogixSDKDemoApp
                    dotnet build
                """

                // script {
                //     def exitCode_1 = bat(returnStatus: true, script: 'dotnet build')
                //     if (exitCode_1 == 0) {
                //         echo 'Executable ran successfully'
                //     } else {
                //         error 'Executable failed to run'
                //     }
                // }
                
            }
        }
        stage('Test') {
            steps {
                echo 'Starting Test..'
                // bat """
                //     C:\\Users\\ASYost\\source\\repos\\ra-cicd-test-old\\cicd-config\\stage-test\\stage-test-configuration\\LogixSDKDemoApp\\bin\\Debug\\net6.0\\TestStage_CICDExample.exe C:\\Users\\ASYost\\source\\repos\\ra-cicd-test-old\\ CICD_test.ACD
                // """
                bat "%path_GitHub%cicd-config\\stage-test\\stage-test-configuration\\LogixSDKDemoApp\\bin\\Debug\\net6.0\\TestStage_CICDExample.exe %path_GitHub% %acdFileName%"
                // "${env.WORKSPACE}/JenkinsScripts/myScript.groovy"

                // script {
                //     def exitCode_2 = bat(returnStatus: true, script: 'cicd-config/stage-test/stage-test-configuration/LogixSDKDemoApp/bin/Debug/net6.0/TestStage_CICDExample.exe')
                //     if (exitCode_2 == 0) {
                //         echo 'Executable ran successfully'
                //     } else {
                //         error 'Executable failed to run'
                //     }
                // }
            }
        }
        stage('Publish') {
            steps {
                echo 'Starting Publishing..'
            }
        }

        stage('Deliver') {
            steps {
                echo 'Starting Delivery....'
            }
        }
    }
}
